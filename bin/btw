#!/usr/bin/env ruby

require 'socket'
require 'chronic'
require 'pp'
require 'multi_json'

config = {
  :debug => false,
  :service => 'btw-change-control',
  :host => 'localhost',
  :port => '5600',
  :user => 'nobody'
}

config_file = File.expand_path('~/.btw.conf')
if File.exist?(config_file)
  config.merge!(MultiJson.load(File.read(config_file), :symbolize_keys => true))
end
if config[:host].kind_of?(String)
  config[:host] = [ config[:host] ]
end
pp config if config[:debug]

# The basics
input = ARGV.join(" ")
output = { "message" => "#{input}", "user" => config[:user], "service" => config[:service] }

# Key values
input.scan(/([a-zA-Z]+)\:([^\: ]+)/).each do |(k,v)|
  output[k] = v
  input.gsub!("#{k}:#{v}","")
end

# Time hacks
input.gsub!(/an hour/, 'one hour')
input.gsub!(/a minute/, 'one minute')
input.gsub!(/ on /, ' ')
input.gsub!(/test/, '')

timestamp = nil
if m = /\/(?<timestamp>.+)\//.match(input) and t = Chronic.parse(m[1])
  timestamp = t
end

unless timestamp
  timestamps = []
  words = input.split(" ")
  i = 0
  while i < words.size do
    puts words[0..i].join(" ") if config[:debug]
    t = Chronic.parse(words[0..i].join(" "), :endian_precedence => [:little, :middle])
    puts "timestamp '#{timestamp}' found '#{t}'" if config[:debug]
    #if timestamp and t.nil?
      #break
    #elsif t
    if t
      timestamps << t
    end
    i += 1
  end
  i = 1
  while i < words.size do
    puts words[i..words.size].join(" ") if config[:debug]
    t = Chronic.parse(words[i..words.size].join(" "), :endian_precedence => [:little, :middle])
    puts "timestamp '#{timestamp}' found '#{t}'" if config[:debug]
    if t
      timestamps << t
    end
    i += 1
  end

  frequencies = timestamps.group_by {|e| e }.inject({}){ |h,(k,v)| h[k] = v.size; h }
  max = frequencies.values.max
  if frequencies.values.count(max) == 1
    # use the most frequent
    timestamp = frequencies.select{|k,v| v == max}.keys.first
  else
    # use the first value
    timestamp = timestamps.first
  end
end

unless timestamp
  timestamp = Time.now
end

output['timestamp'] = timestamp

print "Going to send the following data:\n\n"
pp output
print "\nSend this? [yes] "
answer = STDIN.gets.chomp

case answer.downcase
when 'yes','y', ''

  sent = false
  errors = {}
  config[:host].each do |host|
    begin
      puts "Sending to #{host}:#{config[:port]}" if config[:debug]
      sock = TCPSocket.new(host, config[:port])
      sock.send(MultiJson.dump(output), 0)
      sent = true
      break
    rescue => error
      errors[host] = error
    end
  end

  if sent
    puts "Sent"
  else
    puts "Could not send:"
    pp errors
  end
else
  puts 'Not sent'
end
